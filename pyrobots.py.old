#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
PyRobots
--------
January 2014 - Enric Mieza
Institut Lacetània Manresa

"""

import sys, math, random
from PyQt4 import QtGui
from PyQt4 import QtCore
from PyQt4 import Qt
from PyQt4.phonon import Phonon

class Tret():
    posx = 0
    posy = 0
    vel = 5
    angle = 0
    tamany = 6
    color = QtGui.QColor(0,0,0)

    def __init__(self,robot,angle):
        self.posx = robot._posx+robot._tamany/2
        self.posy = robot._posy+robot._tamany/2
        self.color = robot.color
        self.angle = angle

    def actualitza(self,ample,alt):
        self.posx += self.vel*math.cos(self.angle/360.0*2*math.pi)
        self.posy += self.vel*math.sin(self.angle/360.0*2*math.pi)
        if self.posx<=0 or self.posx>=ample or self.posy<=0 or self.posy>=alt:
            return False
        # retorna True si encara es valid
        return True

    def pinta(self,qp):
        qp.setBrush(self.color)
        qp.drawEllipse(self.posx,self.posy,self.tamany,self.tamany)

class UserError(Exception):
    pass

class RobotBase(QtCore.QObject):
    # basics
    nom = "base"
    autor = "anonim"
    _INITVIDA = 15
    _vida = 0
    _updateVida = QtCore.pyqtSignal()
    _errorSignal = QtCore.pyqtSignal()
    _error = False
    # posicions i velocitats
    _posx = 100
    _posy = 100
    # comencem quiets
    _vel = 0
    _MAXVEL = 3
    _angle = 45
    # forma
    _tamany = 18
    color = QtGui.QColor(250,250,0)
    # trets
    _trets = 0
    _MAXTRETS = 4
    # altres
    _frames = 0
    _MAXFRAMES = 5
    _tonto = 0
    _lastwidth = 0
    _lastheight = 0
    
    def __init__(self,ample,alt):
        super(RobotBase,self).__init__()
        # col·loquem el robot aleatòriament
        self._reinicia(ample,alt)

    def _reinicia(self,ample,alt):
        self._vida = self._INITVIDA
        self._posx = ample/2 #random.randint(0,ample-self._tamany)
        self._posy = random.randint(0,alt-self._tamany)
        self._updateVida.emit()
        self._trets = []
        self._error = False

    def _impacte(self,tret):
        r = QtCore.QRect(self._posx,self._posy,self._tamany,self._tamany)
        if r.contains( tret.posx, tret.posy ):
            self._vida -= 1
            self._updateVida.emit()
            self._pantalla.impact_media.stop()
            self._pantalla.impact_media.play()
            return True
        return False

    def torn(self):
        # a omplir pel programador de robots
        pass

    def _actualitza(self, ample, alt):
        self._frames += 1
        # cedim control al robot (usuari)
        if self._frames%self._MAXFRAMES==0:
            if self._tonto:
                # si estem tontos perdem torn
                # TODO: canviar color?...
                self._tonto -= 1
            else:
                try:
                    self.torn()
                except Exception as e:
                    # retornant false acabem partida (accio ilegal o error)
                    self._error = True
                    print "ERROR ROBOT " + self.nom
                    print e.message
                    #print sys.exc_info()[0]
                    self._errorSignal.emit()
        # actialitzem pos
        self._posx += self._vel*math.cos(self._angle/360.0*2*math.pi)
        self._posy += self._vel*math.sin(self._angle/360.0*2*math.pi)
        # control limits
        xocat = False
        if self._posx >= ample-self._tamany:
            self._posx = ample-self._tamany*2
            xocat = True
        elif self._posx <= 0:
            self._posx = self._tamany
            xocat = True
        if self._posy >= alt-self._tamany:
            self._posy = alt-self._tamany*2
            xocat = True
        elif self._posy <= 0:
            self._posy = self._tamany
            xocat = True
        # comu xocs
        if xocat:
            self._vel = 0
            self._vida -= 1
            self._tonto = 3
            self._pantalla.clang_media.stop()
            self._pantalla.clang_media.play()
            self._updateVida.emit()

        # trets
        for t in self._trets:
            if not t.actualitza(ample,alt):
                self._trets.remove(t)
        # guardem valors
        self._lastwidth = ample
        self._lastheight = alt

        # tornem True si tot ha anat bé
        return True
        
    def _pinta(self, qp):
        qp.setBrush( self.color )
        qp.drawRect( self._posx, self._posy, self._tamany, self._tamany )
        for t in self._trets:
            t.pinta(qp)
        
    def gira(self,graus):
        self._angle = graus

    def accelera(self,val):
        # val = -1 , 0 , 1
        if abs(val)>1:
            raise UserError("accelera")
        self._vel += val
        self._vel = min(self._vel,self._MAXVEL)

    def frena(self):
        self._vel = self._vel/2

    def dispara(self,graus):
        if len(self._trets)>=self._MAXTRETS:
            return False
        t = Tret(self,graus)
        self._trets.append( t )
        # sons
        self._pantalla.shot_media.stop()
        self._pantalla.shot_media.play()
        return True

    def detecta_mur(self):
        murs = {
            "up"  : self._posy,
            "down": self._lastheight-self._posy,
            "left": self._posx,
            "right": self._lastwidth-self._posx
        }
        return murs
        
    def detecta_tret(self):
        pass

    def detecta_velocitat(self):
        return self._vel

    def detecta_gir(self):
        return self._angle

    def detecta_enemic(self):
        p = self._pantalla
        # increments (des del punt de vista de robot1)
        ix = p.robot2._posx - p.robot1._posx
        iy = p.robot2._posy - p.robot1._posy
        # evitar divisió per zero
        if ix==0 and iy>0:
            angle = math.pi/2
        elif ix==0 and iy<0:
            angle = -math.pi/2
        else:
            # calcular angle (entre +pi/2 i -pi/2)
            # aprofitem per passar increments a floats
            angle = math.atan(1.0*iy/ix)
        # angles > 180º
        if ix<0:
            angle += math.pi
        # tornar l'angle adequat en GRAUS segons robot1/2
        if p.robot1 == self:
            return 360.0*angle/(2*math.pi)
        else:
            # robot 2
            angle -= math.pi
            return 360.0*angle/(2*math.pi)


class Pantalla(QtGui.QWidget):
    # Sounds
    #  shot_media
    #  clang_media
    #  impact_media
    #  boum_media
    
    def __init__(self):
        # ULL: cridar el constructor de la classe base és IMPRESCINDIBLE
        # (si sobreescrivim el constructor __init__, si no, no cal)
        super(QtGui.QWidget,self).__init__()
        self.initUI()
    
    def initUI(self):
        # background
        pal = self.palette()
        pal.setColor(self.backgroundRole(), QtGui.QColor(230,230,250) )
        self.setPalette(pal)
        self.setAutoFillBackground(True)

        # robots
        file1 = raw_input("Arxiu robot 1, sense .py [ENTER per 'robot1']:")
        file2 = raw_input("Arxiu robot 1, sense .py [ENTER per 'robot2']:")
        if not file1: file1 = "robot1"
        if not file2: file2 = "robot2"
        # comprovem regles
        if self._check_file( file1 ) and self._check_file( file2 ):
            mod1 = __import__(file1)
            mod2 = __import__(file2)
            self.robot1 = mod1.Robot( self.width(), self.height() )
            self.robot2 = mod2.Robot( self.width(), self.height() )
            self.robot2.color = QtGui.QColor(250,0,50)
            self.robot1._pantalla = self
            self.robot2._pantalla = self

        # sons
        self.shot_media = Phonon.MediaObject( self )
        self.clang_media = Phonon.MediaObject( self )
        self.impact_media = Phonon.MediaObject( self )
        self.boum_media = Phonon.MediaObject( self )
        audioOutput1 = Phonon.AudioOutput( Phonon.GameCategory, self )
        audioOutput2 = Phonon.AudioOutput( Phonon.GameCategory, self )
        audioOutput3 = Phonon.AudioOutput( Phonon.GameCategory, self )
        audioOutput4 = Phonon.AudioOutput( Phonon.GameCategory, self )
        Phonon.createPath( self.shot_media , audioOutput1 )
        Phonon.createPath( self.clang_media , audioOutput2 )
        Phonon.createPath( self.impact_media , audioOutput3 )
        Phonon.createPath( self.boum_media , audioOutput4 )
        #self.shot_media.setCurrentSource( Phonon.MediaSource("laser3.mp3") )
        self.impact_media.setCurrentSource( Phonon.MediaSource("laser2.mp3") )
        self.clang_media.setCurrentSource( Phonon.MediaSource("clang1.mp3") )
        self.boum_media.setCurrentSource( Phonon.MediaSource("crash1.mp3") )

        # timer
        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(20)
        self.timer.timeout.connect(self.repaint)
        self.timer2 = QtCore.QTimer(self)
        self.timer2.setInterval(5000)
        self.timer2.setSingleShot(True)
        self.timer2.timeout.connect(self.reinicia)

        
    def reinicia(self):
        self.robot1._reinicia(self.width(),self.height())
        self.robot2._reinicia(self.width(),self.height())
        self.timer.start()
        self.shot_media.play()


    def paintEvent(self,event):
        qp = QtGui.QPainter()
        qp.begin(self)
        qp.setFont(QtGui.QFont('Decorative',18))
        self.pinta(qp,event)
        qp.end()
        
    def pinta(self,qp,event):
        # comprova errors
        if self.robot1._error and self.robot2._error:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,"ERROR simultani als 2 robots")
            self.boum_media.play()
            return            
        elif self.robot1._error:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,"ERROR ROBOT 1 "+self.robot1.nom)
            self.boum_media.play()
            return            
        elif self.robot2._error:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,"ERROR ROBOT 2 "+self.robot2.nom)
            self.boum_media.play()
            return
        # comprova final partida
        if self.robot1._vida<=0 and self.robot2._vida<=0:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,"EMPAT!")
            self.boum_media.play()
            return
        if self.robot1._vida<=0:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,u"Guanyador: ROBOT 2 " + unicode(self.robot2.nom) )
            #qp.drawText(200,300,"Prem ENTER per recomençar")
            self.boum_media.play()
            return
        if self.robot2._vida<=0:
            qp.drawText(event.rect(),QtCore.Qt.AlignCenter,u"Guanyador: ROBOT 1 " + unicode(self.robot1.nom) )
            #qp.drawText(200,300,"Prem ENTER per recomençar")
            self.boum_media.play()
            return
		# actualitza posició
        self.robot1._actualitza( self.width(), self.height() )
        self.robot2._actualitza( self.width(), self.height() )
        # impactes amb trets
        for tret in self.robot1._trets:
            if self.robot2._impacte(tret):
                self.robot1._trets.remove( tret )
        for tret in self.robot2._trets:
            if self.robot1._impacte(tret):
                self.robot2._trets.remove( tret )

        # TODO: impactes entre robots
        
        # pinta
        self.robot1._pinta(qp)
        self.robot2._pinta(qp)
        
    # Comprova trampes en l'arxiu d'usuari
    def _check_file( self, filename ):
        f = open( filename+".py" )
        l = 0
        for line in f:
            l += 1
            if "._" in line or " _" in line or ";_" in line:
                print "ARXIU " + filename + " IL·LEGAL, línia " + str(l)
                print line
                return False
        return True

class Joc(QtGui.QWidget):
    punts1 = 0
    punts2 = 0
    
    def __init__(self):
        super(Joc, self).__init__()
        
        self.initUI()
        
    def initUI(self):
        self.grid = QtGui.QGridLayout()
        self.lcd1 = QtGui.QLCDNumber()
        self.lcd2 = QtGui.QLCDNumber()
        self.bar1 = QtGui.QProgressBar(self)
        self.bar2 = QtGui.QProgressBar(self)
        
        # pantalla (canvas) per pintar
        self.pantalla = Pantalla()

        # colors
        s = self.bar1.styleSheet().append("""QProgressBar:horizontal {
            border: 1px solid gray;
            border-radius: 3px;
            background: white;
            padding: 1px;
            text-align: center;
            }
            QProgressBar::chunk:horizontal {
            background: qlineargradient(x1: 0, y1: 0.5, x2: 1, y2: 0.5, stop: 0 yellow, stop: 1 white);
            }""")
        self.bar1.setStyleSheet( s )
        s = self.bar2.styleSheet().append("""QProgressBar:horizontal {
            border: 1px solid gray;
            border-radius: 3px;
            background: white;
            padding: 1px;
            text-align: center;
            }
            QProgressBar::chunk:horizontal {
            background: qlineargradient(x1: 0, y1: 0.5, x2: 1, y2: 0.5, stop: 0 #fa0033, stop: 1 white);
            }""")
        self.bar2.setStyleSheet( s )
        
        # connectem robots als marcadors
        self.bar1.setRange( 0, RobotBase._INITVIDA )
        self.pantalla.robot1._updateVida.connect( self.updateVida, QtCore.Qt.QueuedConnection )
        self.pantalla.robot1._errorSignal.connect( self.error_robot, QtCore.Qt.QueuedConnection  )
        self.bar2.setRange( 0, RobotBase._INITVIDA )
        self.pantalla.robot2._updateVida.connect( self.updateVida, QtCore.Qt.QueuedConnection )
        self.pantalla.robot2._errorSignal.connect( self.error_robot, QtCore.Qt.QueuedConnection  )

        # LAYOUT
        spanPant = 20
        self.grid.addWidget(self.pantalla,1,0,spanPant,spanPant)
        self.grid.addWidget(self.lcd1,0,0)
        self.grid.addWidget(self.lcd2,0,spanPant-1)
        self.grid.addWidget(self.bar1,0,1)
        self.grid.addWidget(self.bar2,0,spanPant-2)
		
        self.setLayout(self.grid)
        
        self.setGeometry(50, 50, 1024, 768)
        self.setWindowTitle('PyRobots')
        self.setFocus()
        # reset values + start timer
        self.pantalla.reinicia()
        # passar pantalla a 1r pla
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        self.show()
    
    def updateVida(self):
        # vida robot1
        vida1 = max(self.pantalla.robot1._vida,0)
        self.bar1.setValue( vida1 )
        # control final partida
        if vida1<=0:
            self.pantalla.timer.stop()
            self.punts2 += 1
            self.lcd2.display(self.punts2)
            self.pantalla.repaint()
            # recomencem la partida al cap de 5 segons
            self.pantalla.timer2.start()
        # vida robot2
        vida2 = max(self.pantalla.robot2._vida,0)
        self.bar2.setValue( vida2 )
        # control final partida
        if vida2<=0:
            self.pantalla.timer.stop()
            self.punts1 += 1
            self.lcd1.display(self.punts1)
            self.pantalla.repaint()
            # recomencem la partida al cap de 5 segons
            self.pantalla.timer2.start()
    
    def error_robot(self):
        self.pantalla.timer.stop()
        if self.sender()==self.pantalla.robot1:
            self.punts2 += 1
        else:
            self.punts1 += 1
        self.pantalla.repaint()

    def keyPressEvent(self,e):
        if e.key() == QtCore.Qt.Key_Return:
            self.pantalla.reinicia()

def main():
    # engeguem
    app = QtGui.QApplication(sys.argv)
    app.setApplicationName("PyRobots")
    joc = Joc()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
